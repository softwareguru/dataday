<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vladimir Georgiev on Data Day(s) 2021</title>
    <link>/speakers/vladimir-georgiev/</link>
    <description>Recent content in Vladimir Georgiev on Data Day(s) 2021</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="/speakers/vladimir-georgiev/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Building resilient systems inside the mesh: abstraction and automation of Virtual Service generation</title>
      <link>/sessions/building-resilient-systems-inside-the-mesh-abstraction-and-automation-of-virtual-service-generation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sessions/building-resilient-systems-inside-the-mesh-abstraction-and-automation-of-virtual-service-generation/</guid>
      <description>Istioâ€™s Virtual Service API provides a language agnostic way of implementing graceful retries on failures until a timeout budget is exhausted. Precise timeouts and retries per endpoint result in better performance. Having hundreds of gRPC services means there will be as many YAML files to be configured, tested and managed, however. I will explain how we built a scalable way of managing retries and timeouts across the service mesh per service per RPC.</description>
    </item>
    
  </channel>
</rss>